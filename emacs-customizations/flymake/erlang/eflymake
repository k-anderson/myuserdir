#!/usr/bin/env escript
-export([main/1]).

-record(state, {includes=[], paths=[], libs=get_erl_lib()}).

main([Target, File]) ->
    io:format("~s", [build_cmd(Target, File)]).

build_cmd(Target, File) ->
    BaseDir = find_project_base(File),
    State = includes(BaseDir, #state{includes=[lists:flatten(["-I \"", filename:dirname(File), "\""])]}),
    Defaults = "-W +warn_obsolete_guard +warn_unused_import +warn_shadow_vars +warn_export_vars +strong_validation +report +bin_opt_info",
    io_lib:format("export ERL_LIBS=\"~s\"; erlc ~s ~s \"~s\"", [string:join(State#state.libs, ":")
                                                                ,string:join(State#state.includes, " ")
                                                                ,Defaults
                                                                ,Target
                                                               ]).

includes(Dir, State) ->
    collect_includes([Dir], State).

collect_includes([], State) -> State;
collect_includes([Dir|Dirs], State) ->
    case is_dir_excluded(Dir) of
        true ->
            collect_includes(Dirs, State);
        false ->
            S = maybe_include_as_library(Dir, State),
            collect_includes(Dirs, S)
    end.

maybe_include_as_library(Dir, State) ->
    case string:sub_string(Dir, string:rchr(Dir, $/) + 1) =:= "lib"
        andalso filelib:wildcard([Dir, "/*-*.*.*"]) =/= []
    of
        false -> maybe_add_subproject(Dir, State);
        true -> 
            maybe_add_subproject(Dir, maybe_add_library(Dir, State))
    end.

maybe_add_subproject(Dir, State) ->
    case (not lists:member(Dir, State#state.includes))
        andalso is_std_erl_dir(Dir)
    of
        false -> maybe_has_headers(Dir, State);
        true ->
            maybe_has_headers(Dir, maybe_add_include(Dir, State))
    end.

maybe_has_headers(Dir, State) ->
    Headers = filelib:wildcard([Dir, "/*/*.hrl"]),
    S = maybe_add_header_dir(Headers, State),
    collect_subdirectory(Dir, S).

maybe_add_header_dir([], State) -> State;
maybe_add_header_dir([Header|Headers], State) ->
    Dir = filename:dirname(Header),
    case lists:member(Dir, State#state.includes) of
        true -> maybe_add_header_dir(Headers, State);
        false ->
            maybe_add_header_dir(Headers, maybe_add_include(Dir, State))
    end.

collect_subdirectory(Dir, State) ->
    collect_includes(get_sub_directories(Dir), State).

maybe_add_library(Dir, State) ->
    case lists:member(Dir, State#state.libs) of
        true -> State;
        false ->
            State#state{libs=[lists:flatten(Dir)
                              |State#state.libs
                             ]}
    end.            

maybe_add_include(Dir, State) ->
    Include = lists:flatten(["-I \"", Dir, "\""]),
    case lists:member(Include, State#state.includes) of
        true -> State;
        false ->
            State#state{includes=[Include
                                  |State#state.includes
                                 ]}
    end.

is_dir_excluded(Dir) ->
    string:substr(Dir, string:rchr(Dir, $/) + 1, 1) =:= ".".

get_sub_directories(Dir) ->
    [lists:flatten(D)
     || D <- filelib:wildcard([Dir, "/*"])
            ,filelib:is_dir(D)
    ].

find_project_base(File) ->
    Paths = string:tokens(filename:dirname(File), "/"),
    lists:flatten(find_project_base(Paths, "")).

find_project_base([], Base) -> Base;
find_project_base([Path|Paths], Base) ->
    Dir = [Base, "/", Path],
    case is_std_erl_dir(Dir) of
        true -> Dir;
        false -> 
            find_project_base(Paths, Dir)
    end.

is_std_erl_dir(Dir) ->
    filelib:is_dir([Dir, "/src"])
        orelse filelib:is_dir([Dir, "/include"])
        orelse filelib:is_dir([Dir, "/ebin"])
        orelse filelib:is_file([Dir, "/rebar.config"])
        orelse filelib:is_file([Dir, "/Makefile"]).

get_erl_lib() ->
    case os:getenv("ERL_LIBS") of
        false -> [];
        ErlLibs ->
            string:tokens(ErlLibs, ":;")
    end.
